{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Counter","state","text1","inc","setState","parseInt","dec","sets","e","value","target","isNaN","erase","console","log","this","classes","props","md","xs","AppBar","position","color","style","textAlign","Toolbar","Typography","variant","className","title","padding","margin","maxWidth","borderRadius","Paper","elevation","marginLeft","marginRight","marginTop","marginBottom","Grid","container","spacing","item","TextField","id","label","fullWidth","onChange","Button","onClick","Component","withStyles","theme","root","flexGrow","button","display","backgroundColor","each1","width","height","fontSize","each","textbox","borderWidth","borderColor","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae3c88cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { AppBar, Toolbar, TextField, Typography, Button, Grid, Paper } from '@material-ui/core'\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  button: {\n    display: 'block',\n    backgroundColor: 'white'\n  },\n  each1: {\n    width: '55%',\n    height: '50px',\n    fontSize: '25px',\n    backgroundColor: '#00ffff',\n    color: ' #1a0000'\n  },\n  each: {\n    width: '50%',\n    height: '50px',\n    fontSize: '30px',\n    backgroundColor: '#00ffff',\n    color: ' #1a0000'\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'center',\n    fontSize: \"25px\"\n  },\n  textbox: {\n    height: '60px',\n    backgroundColor: 'white',\n    width: '100%',\n    fontSize: '25px',\n    textAlign: 'center',\n    borderWidth: '3px',\n    borderColor: 'red'\n  }\n});\n\nclass Counter extends Component {\n  state = {\n    text1: '0',\n\n  }\n  inc = () => {\n    this.setState({\n      text1: parseInt(this.state.text1) + 1\n    })\n  }\n  dec = () => {\n    this.setState({\n      text1: parseInt(this.state.text1) - 1\n    })\n  }\n  sets = (e) => {\n    let value = e.target.value;\n    if (!value || isNaN(value)) value = 0;\n\n    this.setState({\n      text1: value\n    })\n  }\n\n  erase = () => {\n    this.setState({\n      text1: 0\n    })\n  }\n\n  render() {\n    console.log(this.state.text1)\n    const { classes } = this.props;\n\n    return (\n      <div md={4} xs={4}>\n        <AppBar position=\"static\" color=\"secondary\" style={{ textAlign: \"center\" }}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Counter Application\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div style={{ padding: \"130px 5%\", margin: \"0 auto\", maxWidth: \"500px\", borderRadius: \"2%\" }}>\n          <Paper elevation={10} md={12} xs={12} style={{ padding: \"5%\" }}>\n            <div style={{ marginLeft: \"3%\", marginRight: \"3%\", marginTop: \"3%\", marginBottom: \"3%\" }} md={4} xs={4}>\n\n              <Grid container spacing={3}>\n                <Grid item md={12} xs={12}>\n                  <TextField id=\"text1\" label=\"Input Value\" variant=\"outlined\"\n                    fullWidth style={{ textAlign: \"center\" }}\n                    onChange={(e) => this.sets(e)}\n                    value={this.state.text1} />\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={3}>\n                {/* <Grid item md={3} xs={3}></Grid> */}\n                <Grid item md={5} xs={5}>\n                  <Button variant=\"contained\" onClick={() => this.inc()} fullWidth\n                    color=\"secondary\">\n                    Increment\n                   </Button>\n                </Grid>\n                <Grid item md={2} xs={2}></Grid>\n                <Grid item md={5} xs={5}>\n                  <Button variant=\"contained\" onClick={() => this.dec()} fullWidth\n                    color=\"secondary\">\n                    Decrement\n                  </Button>\n                </Grid>\n              </Grid>\n\n              <Grid container spacing={3}>\n                <Grid item md={12} xs={12}>\n                  <Button variant=\"contained\" onClick={() => this.erase()} fullWidth\n                    color=\"secondary\">\n                    Reset\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Paper>\n        </div>\n      </div>\n    )\n  }\n}\nexport default withStyles(styles)(Counter);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}